package com.example.demo.Service;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.example.demo.Domain.PaymentMethod;
import com.example.demo.Domain.PaymentOrderStatus;
import com.example.demo.Model.PaymentOrder;
import com.example.demo.Model.User;
import com.example.demo.Repository.PaymentRepo;
import com.example.demo.Response.PaymentResponse;
import com.razorpay.Payment;
import com.razorpay.PaymentLink;
import com.razorpay.RazorpayClient;
import com.razorpay.RazorpayException;
import com.stripe.Stripe;
import com.stripe.exception.StripeException;
import com.stripe.model.checkout.Session;
import com.stripe.param.checkout.SessionCreateParams;


@Service
public class PaymentServiceImpl implements PaymentService{

	@Autowired
	private PaymentRepo repo;
	
	@Value("${stripe.api.key}")
	private String stripeSecretKey;
	
	@Value("${razorpay.api.key}")
	private String apiKey;
	
	
	@Value("${razorpay.api.secret}")
	private String apiSecretKey;
	
	@Override
	public PaymentOrder createOrder(User user, Long amount, PaymentMethod paymentMethod) {
		
		PaymentOrder paymentOrder=new PaymentOrder();
		paymentOrder.setUser(user);
		paymentOrder.setAmount(amount);
		paymentOrder.setPaymentMethod(paymentMethod);
		paymentOrder.setStatus(PaymentOrderStatus.PENDING);
		return repo.save(paymentOrder);
	}

	
	
	@Override
	public PaymentOrder getPaymentOrderById(Long id) throws Exception {
		
		return repo.findById(id).orElseThrow(()->new Exception("Payment Order not found"));
	}

	
	
	@Override
	public Boolean proceedPaymentOrder(PaymentOrder paymentOrder, String paymentId) throws RazorpayException {
		if(paymentOrder.getStatus()==null) {
			paymentOrder.setStatus(PaymentOrderStatus.PENDING);
		}
		if(paymentOrder.getStatus().equals(PaymentOrderStatus.PENDING)) {
			if(paymentOrder.getPaymentMethod().equals(PaymentMethod.RAZORPAY)) {
				RazorpayClient razorpay=new RazorpayClient(apiKey,apiSecretKey);
				Payment payment=razorpay.payments.fetch(paymentId);
				
				Integer amount=payment.get("amount");
				String status=payment.get("status");
				
				if(status.equals("captured")) {
					paymentOrder.setStatus(PaymentOrderStatus.SUCCESS);
					return true;
				}
				paymentOrder.setStatus(PaymentOrderStatus.FAILED);
				repo.save(paymentOrder);
				return false;
			}
			
			paymentOrder.setStatus(PaymentOrderStatus.SUCCESS);
			repo.save(paymentOrder);
			return true;
		}
		return false;
	}

	
	@Override
	public PaymentResponse createRazorpayPaymentLink(User user, Long Amount,Long orderId)throws RazorpayException {
		Long amount=Amount*100;
		try {
			RazorpayClient razorpay=new RazorpayClient(apiKey, apiSecretKey);
			
			//Create a JSON onj with the payment link request
			JSONObject paymentLinkRequest=new JSONObject();
			paymentLinkRequest.put("amount", amount);
			paymentLinkRequest.put("currency", "INR");
			
			//Create a JSON obj with the customer details
			JSONObject customer=new JSONObject();
			customer.put("name", user.getFullName());
			customer.put("email", user.getEmail());
			
			paymentLinkRequest.put("customer",customer);
			

			
			//set the callback url and method
			paymentLinkRequest.put("callback_url","http://localhost:5173/wallet?order_id="+orderId);
			paymentLinkRequest.put("callback_method","get");
			
			PaymentLink payment=razorpay.paymentLink.create(paymentLinkRequest);
			
			String paymentLinkUrl=payment.get("short_url").toString();
			
			PaymentResponse res=new PaymentResponse();
			res.setPayment_url(paymentLinkUrl);
			
			return res;
			
			
		}catch(RazorpayException e) {
			throw new RazorpayException(e.getMessage());
		}
	}

	@Override
	public PaymentResponse createStripePaymentLink(User user, Long amount, Long orderId) throws StripeException {
		Stripe.apiKey=stripeSecretKey;
		
		SessionCreateParams params=SessionCreateParams.builder()
				.addPaymentMethodType(SessionCreateParams.PaymentMethodType.CARD)
				.setMode(SessionCreateParams.Mode.PAYMENT)
				.setSuccessUrl("http://localhost:5173/wallet?order_id="+orderId)
				.setCancelUrl("http://localhost:5173/payment/cancel")
				.addLineItem(SessionCreateParams.LineItem.builder()
						.setQuantity(1L)
						.setPriceData(SessionCreateParams.LineItem.PriceData.builder()
								.setCurrency("usd")
								.setUnitAmount(amount*100)
								.setProductData(SessionCreateParams.LineItem
										.PriceData
										.ProductData
										.builder()
										.setName("Top up wallet")
										.build()
										).build()
								).build()
						).build();
		
		Session session=Session.create(params);
		
		PaymentResponse res=new PaymentResponse();
		res.setPayment_url(session.getUrl());
		
		return res;
	}

}
