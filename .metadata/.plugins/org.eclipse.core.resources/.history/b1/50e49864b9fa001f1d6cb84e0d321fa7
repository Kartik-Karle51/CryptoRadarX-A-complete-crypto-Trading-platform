package com.example.demo.Controller;

import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.Domain.VerificationType;
import com.example.demo.Model.ForgotPasswordToken;
import com.example.demo.Model.User;
import com.example.demo.Model.VerificationCode;
import com.example.demo.Request.ForgotPasswordTokenRequest;
import com.example.demo.Request.ResetPasswordRequest;
import com.example.demo.Response.ApiResponse;
import com.example.demo.Response.AuthResponse;
import com.example.demo.Service.EmailService;
import com.example.demo.Service.ForgotPasswordService;
import com.example.demo.Service.UserService;
import com.example.demo.Service.VerificationCodeService;
import com.example.demo.Utils.OtpUtils;

@RestController
public class UserController {

	@Autowired
	private EmailService emailService;

	@Autowired
	private UserService userService;

	@Autowired
	private ForgotPasswordService forgotService;

	@Autowired
	private VerificationCodeService verificationCodeService;

	
	
	
	@GetMapping("/api/users/profile")
	public ResponseEntity<User> getUserProfile(@RequestHeader("Authorization") String jwt) throws Exception {
		User user = userService.findUserProfileByJwt(jwt);
		return new ResponseEntity<User>(user, HttpStatus.OK);
	}

	
	
	
//	@PostMapping("/api/users/verification/{verificationType}/send-otp")
//	public ResponseEntity<String> sendVerificationOtp(@RequestHeader("Authorization") String jwt,
//			@PathVariable VerificationType verificationType) throws Exception {
//
//		User user = userService.findUserProfileByJwt(jwt);
//		VerificationCode verificationCode = verificationCodeService.getVerificationCodeByUser(user.getId());
//		if (verificationCode == null) {
//			verificationCode = verificationCodeService.sendVerificationCode(user, verificationType);
//		}
//
//		if (verificationType.equals(VerificationType.EMAIL)) {
//			emailService.sendVerificationOTPEmail(user.getEmail(), verificationCode.getOtp());
//		}
//
//		return new ResponseEntity<>("Verification OTP sent successfully", HttpStatus.OK);
//	}

	
	
	
	
//	@PatchMapping("/api/users/enable-two-factor/verify-otp/{otp}")
//	public ResponseEntity<User> enableTwoFactorAuthentication(@PathVariable String otp,
//			@RequestHeader("Authorization") String jwt) throws Exception {
//		
//		User user = userService.findUserProfileByJwt(jwt);
//
//		VerificationCode verificationCode = verificationCodeService.getVerificationCodeByUser(user.getId());
//
//		String sendTo = verificationCode.getVerificationType().equals(VerificationType.EMAIL)
//				? verificationCode.getEmail()
//				: verificationCode.getMobile();
//
//		boolean isVerified = verificationCode.getOtp().equals(otp);
//
//		if (isVerified) {
//			User updatedUser = userService.enableTwoFactorAuthentication(verificationCode.getVerificationType(), sendTo,
//					user);
//			verificationCodeService.deleteVerificationCodeById(verificationCode);
//			
//			return new ResponseEntity<User>(updatedUser, HttpStatus.OK);
//		}
//
//		throw new Exception("Wrong OTP");
//	}

	
//	
//	
//	@PostMapping("/auth/users/reset-password/send-otp")
//	public ResponseEntity<AuthResponse> sendForgotPasswordOtp(@RequestBody ForgotPasswordTokenRequest req)
//			throws Exception {
//
//		User user = userService.findUserByEmail(req.getSendTo());
//		String otp = OtpUtils.generateOTP();
//		UUID uuid = UUID.randomUUID();
//		String id = uuid.toString();
//
//		ForgotPasswordToken token = forgotService.findByUser(user.getId());
//		if (token == null) {
//			token = forgotService.createToken(user, id, otp, req.getVerificationType(), req.getSendTo());
//		}
//
//		if (req.getVerificationType().equals(VerificationType.EMAIL)) {
//			emailService.sendVerificationOTPEmail(user.getEmail(), token.getOtp());
//		}
//
//		AuthResponse res = new AuthResponse();
//		res.setSession(token.getId());
//		res.setMessage("Password reset OTP sent succesfully");
//
//		return new ResponseEntity<>(res, HttpStatus.OK);
//	}
//
//	
//	
//	
//	@PatchMapping("/auth/users/reset-password/verify-otp")
//	public ResponseEntity<ApiResponse> resetPassword(@RequestParam String id, @RequestBody ResetPasswordRequest req, @RequestHeader("Authorization") String jwt) throws Exception {
//		
//		ForgotPasswordToken token = forgotService.findById(id);
//
//		boolean isVerified=token.getOtp().equals(req.getOtp());
//		if(isVerified) {
//			userService.updatePassword(token.getUser(), req.getPassword());
//			ApiResponse res=new ApiResponse();
//			res.setMessage("Password Update Successfully");
//			return new ResponseEntity<>(res,HttpStatus.ACCEPTED);
//		}
//		throw new Exception("Wrong OTP");
//	}
}
