package com.example.demo.Controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.Domain.PaymentMethod;
import com.example.demo.Domain.WalletTransactionType;
import com.example.demo.Model.PaymentOrder;
import com.example.demo.Model.User;
import com.example.demo.Model.WalletTransaction;
import com.example.demo.Response.PaymentResponse;
import com.example.demo.Service.PaymentService;
import com.example.demo.Service.TransactionService;
import com.example.demo.Service.UserService;
import com.razorpay.RazorpayException;
import com.stripe.exception.StripeException;

@RestController

public class PaymentController {

	@Autowired
	private UserService userService;
	
	@Autowired
	private PaymentService paymentService;
	
	
	@Autowired
	TransactionService walletTransactionService;
	
	@PostMapping("/api/payment/{paymentMethod}/amount/{amount}")
	public ResponseEntity<PaymentResponse> paymentHandler(@PathVariable("paymentMethod") PaymentMethod paymentMethod,@PathVariable("amount") Long amount,@RequestHeader("Authorization")String jwt)throws RazorpayException,StripeException{
		
		User user=userService.findUserProfileByJwt(jwt);
		System.out.println("Payment Method: " + paymentMethod);
	    System.out.println("Amount: " + amount);
		PaymentResponse paymentResponse ;
		
		PaymentOrder order=paymentService.createOrder(user, amount, paymentMethod);
		if(paymentMethod.equals(PaymentMethod.RAZORPAY)) {
			paymentResponse= paymentService.createRazorpayPaymentLink(user, amount,order.getId());
		}else {
			paymentResponse=paymentService.createStripePaymentLink(user, amount, order.getId());
			System.out.println(order.getId());
		}
		 WalletTransaction walletTransaction=walletTransactionService.createTransaction(user.getWallet(),WalletTransactionType.ADD_MONEY,user.getWallet().getId(),"Adding Balance to the wallet",amount);
		return new ResponseEntity<>(paymentResponse,HttpStatus.CREATED);
	}
}
